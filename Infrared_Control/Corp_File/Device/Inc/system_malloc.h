#ifndef __SYSTEM_MALLOC_H__
#define __SYSTEM_MALLOC_H__

//#include "stm32f1xx.h"
#include "stdint.h"
/******************************************************************************
 *                              定义通用宏
*******************************************************************************/
#ifndef NULL
#define NULL 0
#endif

#ifndef u8
#define u8 uint8_t
#endif

#ifndef u16
#define u16 uint16_t
#endif

#ifndef u32
#define u32 uint32_t
#endif

/******************************************************************************
 *                              定义两个内存池的操作符
*******************************************************************************/
#define SRAMIN	    0		            //操作内部内存池
#define SRAMEX      1		            //操作外部内存池

/******************************************************************************
 *                              定义支持的SRAM块数
*******************************************************************************/
#define SRAMBANK 	1                   //1表示只使用内部内存池，2表示同时使用内部和外部内存池

/******************************************************************************
 *                              定义内存池参数
*******************************************************************************/
//mem1内存参数设定.mem1完全处于内部SRAM里面
#define MEM1_BLOCK_SIZE			32                                  //内存块大小为32字节
#define MEM1_MAX_SIZE			1024//1 * 1024                            //最大管理内存1K
#define MEM1_ALLOC_TABLE_SIZE	MEM1_MAX_SIZE / MEM1_BLOCK_SIZE     //内存表大小

//mem2内存参数设定.mem2的内存池处于外部SRAM里面
#define MEM2_BLOCK_SIZE			32                                  //内存块大小为32字节
#define MEM2_MAX_SIZE			960 * 1024                          //最大管理内存960K
#define MEM2_ALLOC_TABLE_SIZE	MEM2_MAX_SIZE / MEM2_BLOCK_SIZE     //内存表大小 

/******************************************************************************
 *                              定义内存管理控制器类型
*******************************************************************************/
struct _m_mallco_dev
{
    void (*init)(u8);                   //内存管理初始化回调函数
    u8 (*perused)(u8);                  //获取内存使用率回调函数
    u8 *membase[SRAMBANK];              //内存池
    u16 *memmap[SRAMBANK];              //内存管理表
    u8 memrdy[SRAMBANK];                //内存管理就绪状态
};

/******************************************************************************
 *                              外部变量声明
*******************************************************************************/
extern struct _m_mallco_dev mallco_dev;

/******************************************************************************
 *                              外部函数声明
*******************************************************************************/
extern void mymemcpy(void *des, void *src, u32 n);
extern void my_mem_init(u8 memx);
extern u8 my_mem_perused(u8 memx);
extern void myfree(u8 memx, void *ptr);
extern void *mymalloc(u8 memx, u32 size);
extern void *myrealloc(u8 memx, void *ptr, u32 size);
#endif
