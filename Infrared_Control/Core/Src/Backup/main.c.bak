/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "dma.h"
#include "25QFlash.h"
#include "string.h"
#include "hal_abstract_flash_alloc.h"
#include "HAL_Control_Uart.h"
#include "stdlib.h"
#include "serialctrl_memopt.h"
#include "gen_link_list.h"
#include "serialctrl_ircaddrproc.h"
#include "ircode_catch.h"
#include "ircode_emit.h"

#include "HAL_SM_MainLoop.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

  void** tmp_data = NULL;
  void* tmp_pt1; 
  void* tmp_pt2; 
  void* tmp_pt3; 
  uint8_t datasize;
  uint8_t datasize1 =1;
  uint8_t datasize2 =2;
  uint8_t datasize3 =3;
	uint8_t datasize4 =0;
	uint8_t test[] = {0x13,0x88,0x03,0xe8,0x13,0x88,0xff,0xff,0xff,0xff,0x03,0xe8,0x13,0x88,0x03,0xe8,0x13,0x88,0x03,0xe8};
  GEN_LINK_ST* tmp;
  GEN_LINK_ST* tmp1;
  GEN_LINK_ST* tmp2;
	uint32_t tmp_add = 0;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
	MX_DMA_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  MX_TIM14_Init();
  /* USER CODE BEGIN 2 */

  tmp = gen_link_creat();
	
	
  gen_link_add(tmp,&datasize1);
  gen_link_add(tmp,&datasize1);
  gen_link_add(tmp,&datasize1);
  tmp_data = gen_link_get(tmp,&datasize);
  tmp_pt1 = tmp_data[0];
	datasize1 = 2;
	datasize4= *(uint8_t*)tmp_pt1;
  tmp_pt2 = tmp_data[1];
	datasize1 = 3;
	datasize4= *(uint8_t*)tmp_pt2;
  tmp_pt3 = tmp_data[2];
	datasize1 = 4;
	datasize4= *(uint8_t*)tmp_pt3;
  gen_link_remove(tmp,tmp_pt1);
  tmp_data = gen_link_get(tmp,&datasize);
  gen_link_remove(tmp,tmp_pt2);
  tmp_data = gen_link_get(tmp,&datasize);
  gen_link_remove(tmp,tmp_pt3);
  tmp_data = gen_link_get(tmp,&datasize);
  gen_link_delate(tmp);
  
	
	
  
  SysTick->CTRL  = SysTick_CTRL_TICKINT_Msk | SysTick->CTRL;
	HAL_Control_UartInit();
	falsh_init();
//	fls_init();
	memopt_index_init();
	mmc_ircode_addr_flash();
	
	
	tmp_add = mmc_ircode_addr_get(7000);
	mmc_ircode_addr_flash();
	tmp_add = mmc_ircode_addr_get(7000);
	mmc_ircode_addr_flash();
	tmp_add = mmc_ircode_addr_get(7000);
	mmc_ircode_addr_flash();
	tmp_add = mmc_ircode_addr_get(7000);
	
	ircode_emit_inarray(0,test,sizeof(test),sizeof(test));
	ircode_emit_inarray(2,test,sizeof(test),sizeof(test));
	
//	LL_mDelay(2000);
//	ircode_emit_test();
//	ircode_catch_stat = 1;
//	LL_TIM_ClearFlag_UPDATE(TIM1);
//	LL_TIM_ClearFlag_CC3(TIM1);
//	
//	LL_TIM_EnableIT_CC3(TIM1);
//	LL_TIM_EnableIT_UPDATE(TIM1);
//	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
//	LL_TIM_EnableCounter(TIM1);
	
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_SM_MainLoop();
		
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
  while(LL_RCC_HSI_IsReady() != 1)
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
  LL_RCC_PLL_Enable();
  LL_RCC_PLL_EnableDomain_SYS();
  while(LL_RCC_PLL_IsReady() != 1)
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);

  LL_Init1msTick(64000000);

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
