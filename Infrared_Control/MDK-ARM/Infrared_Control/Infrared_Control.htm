<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Infrared_Control\Infrared_Control.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Infrared_Control\Infrared_Control.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Dec 15 16:18:07 2023
<BR><P>
<H3>Maximum Stack Usage =        812 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
HAL_SM_DeviceInitTask &rArr; HAL_Control_DeviceInit &rArr; memory_init &rArr; memory_get_dev_addr &rArr; sha3 &rArr; sha3_update &rArr; sha3_keccakf &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[37]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[29]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">HardFault_Handler</a><BR>
 <LI><a href="#[28]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">NMI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[37]">ADC1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[36]">DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</a> from stm32g0xx_it.o(i.DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[34]">DMA1_Channel1_IRQHandler</a> from stm32g0xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[35]">DMA1_Channel2_3_IRQHandler</a> from stm32g0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[31]">EXTI0_1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[32]">EXTI2_3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[33]">EXTI4_15_IRQHandler</a> from stm32g0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2f]">FLASH_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[0]">HAL_SM_DeviceInitTask</a> from hal_sm_inittask_api.o(i.HAL_SM_DeviceInitTask) referenced 2 times from hal_sm_mainloop.o(.data)
 <LI><a href="#[29]">HardFault_Handler</a> from stm32g0xx_it.o(i.HardFault_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[3e]">I2C1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[3f]">I2C2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[28]">NMI_Handler</a> from stm32g0xx_it.o(i.NMI_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2b]">PendSV_Handler</a> from stm32g0xx_it.o(i.PendSV_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[30]">RCC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2e]">RTC_TAMP_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[27]">Reset_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2a]">SVC_Handler</a> from stm32g0xx_it.o(i.SVC_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2c]">SysTick_Handler</a> from stm32g0xx_it.o(i.SysTick_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[45]">SystemInit</a> from system_stm32g0xx.o(i.SystemInit) referenced from startup_stm32g030xx.o(.text)
 <LI><a href="#[3b]">TIM14_IRQHandler</a> from stm32g0xx_it.o(i.TIM14_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[3c]">TIM16_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[3d]">TIM17_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from stm32g0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[39]">TIM1_CC_IRQHandler</a> from stm32g0xx_it.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[3a]">TIM3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[13]">Task_IREmit_Handler_IDLE</a> from task_iremit.o(i.Task_IREmit_Handler_IDLE) referenced 2 times from task_iremit.o(.data)
 <LI><a href="#[14]">Task_IREmit_Handler_Run</a> from task_iremit.o(i.Task_IREmit_Handler_Run) referenced 2 times from task_iremit.o(.data)
 <LI><a href="#[12]">Task_IREmit_Handler_Uninit</a> from task_iremit.o(i.Task_IREmit_Handler_Uninit) referenced 2 times from task_iremit.o(.data)
 <LI><a href="#[5]">Task_IREmit_MainLoop</a> from task_iremit.o(i.Task_IREmit_MainLoop) referenced 2 times from hal_sm_mainloop.o(.data)
 <LI><a href="#[a]">Task_Key_Handler_IDLE</a> from task_key.o(i.Task_Key_Handler_IDLE) referenced 2 times from task_key.o(.data)
 <LI><a href="#[b]">Task_Key_Handler_Run</a> from task_key.o(i.Task_Key_Handler_Run) referenced 2 times from task_key.o(.data)
 <LI><a href="#[9]">Task_Key_Handler_Uninit</a> from task_key.o(i.Task_Key_Handler_Uninit) referenced 2 times from task_key.o(.data)
 <LI><a href="#[2]">Task_Key_MainLoop</a> from task_key.o(i.Task_Key_MainLoop) referenced 2 times from hal_sm_mainloop.o(.data)
 <LI><a href="#[d]">Task_LED_Handler_IDLE</a> from task_led.o(i.Task_LED_Handler_IDLE) referenced 2 times from task_led.o(.data)
 <LI><a href="#[e]">Task_LED_Handler_Run</a> from task_led.o(i.Task_LED_Handler_Run) referenced 2 times from task_led.o(.data)
 <LI><a href="#[c]">Task_LED_Handler_Uninit</a> from task_led.o(i.Task_LED_Handler_Uninit) referenced 2 times from task_led.o(.data)
 <LI><a href="#[1]">Task_LED_MainLoop</a> from task_led.o(i.Task_LED_MainLoop) referenced 2 times from hal_sm_mainloop.o(.data)
 <LI><a href="#[7]">Task_RF_Handler_IDLE</a> from task_433communicate.o(i.Task_RF_Handler_IDLE) referenced 2 times from task_433communicate.o(.data)
 <LI><a href="#[8]">Task_RF_Handler_Run</a> from task_433communicate.o(i.Task_RF_Handler_Run) referenced 2 times from task_433communicate.o(.data)
 <LI><a href="#[6]">Task_RF_Handler_Uninit</a> from task_433communicate.o(i.Task_RF_Handler_Uninit) referenced 2 times from task_433communicate.o(.data)
 <LI><a href="#[3]">Task_RF_MainLoop</a> from task_433communicate.o(i.Task_RF_MainLoop) referenced 2 times from hal_sm_mainloop.o(.data)
 <LI><a href="#[10]">Task_Serial_Handler_IDLE</a> from task_serial.o(i.Task_Serial_Handler_IDLE) referenced 2 times from task_serial.o(.data)
 <LI><a href="#[11]">Task_Serial_Handler_Run</a> from task_serial.o(i.Task_Serial_Handler_Run) referenced 2 times from task_serial.o(.data)
 <LI><a href="#[f]">Task_Serial_Handler_Uninit</a> from task_serial.o(i.Task_Serial_Handler_Uninit) referenced 2 times from task_serial.o(.data)
 <LI><a href="#[4]">Task_Serial_MainLoop</a> from task_serial.o(i.Task_Serial_MainLoop) referenced 2 times from hal_sm_mainloop.o(.data)
 <LI><a href="#[42]">USART1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from stm32g0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2d]">WWDG_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[46]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g030xx.o(.text)
 <LI><a href="#[4d]">ircode_emit_handler_timeout</a> from ircode_emit.o(i.ircode_emit_handler_timeout) referenced from ircode_emit.o(i.ircode_emit_it_handler)
 <LI><a href="#[4d]">ircode_emit_handler_timeout</a> from ircode_emit.o(i.ircode_emit_handler_timeout) referenced from ircode_emit.o(i.ircode_emit_start)
 <LI><a href="#[47]">key_scan_task</a> from driver_key.o(i.key_scan_task) referenced from task_key.o(i.Task_Key_Handler_Uninit)
 <LI><a href="#[44]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[23]">pkg_handler_catch_directSend</a> from serialctrl_handler.o(i.pkg_handler_catch_directSend) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[1d]">pkg_handler_catch_enable</a> from serialctrl_handler.o(i.pkg_handler_catch_enable) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[22]">pkg_handler_catch_send2IR</a> from serialctrl_handler.o(i.pkg_handler_catch_send2IR) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[1e]">pkg_handler_catch_send2serial</a> from serialctrl_handler.o(i.pkg_handler_catch_send2serial) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[20]">pkg_handler_catch_write2flash</a> from serialctrl_handler.o(i.pkg_handler_catch_write2flash) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[26]">pkg_handler_chip_cleanAll</a> from serialctrl_handler.o(i.pkg_handler_chip_cleanAll) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[15]">pkg_handler_handshake</a> from serialctrl_handler.o(i.pkg_handler_handshake) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[1f]">pkg_handler_ircode_curient</a> from serialctrl_handler.o(i.pkg_handler_ircode_curient) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[1b]">pkg_handler_ircode_read</a> from serialctrl_handler.o(i.pkg_handler_ircode_read) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[1c]">pkg_handler_ircode_usage</a> from serialctrl_handler.o(i.pkg_handler_ircode_usage) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[1a]">pkg_handler_ircode_write</a> from serialctrl_handler.o(i.pkg_handler_ircode_write) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[24]">pkg_handler_irindex_getallindex</a> from serialctrl_handler.o(i.pkg_handler_irindex_getallindex) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[17]">pkg_handler_irindex_getotal</a> from serialctrl_handler.o(i.pkg_handler_irindex_getotal) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[18]">pkg_handler_irindex_read</a> from serialctrl_handler.o(i.pkg_handler_irindex_read) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[19]">pkg_handler_irindex_remove</a> from serialctrl_handler.o(i.pkg_handler_irindex_remove) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[25]">pkg_handler_irindex_rmallindex</a> from serialctrl_handler.o(i.pkg_handler_irindex_rmallindex) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[21]">pkg_handler_irindex_setredy_stat</a> from serialctrl_handler.o(i.pkg_handler_irindex_setredy_stat) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[16]">pkg_handler_irindex_write</a> from serialctrl_handler.o(i.pkg_handler_irindex_write) referenced 2 times from serialctrl_handler.o(.data)
 <LI><a href="#[4b]">rf_comm_task</a> from api_rf_comm.o(i.rf_comm_task) referenced from task_433communicate.o(i.Task_RF_Handler_Uninit)
 <LI><a href="#[4c]">rf_data_packet_num_reset_task</a> from api_rf_comm.o(i.rf_data_packet_num_reset_task) referenced from task_433communicate.o(i.Task_RF_Handler_Uninit)
 <LI><a href="#[4a]">rf_power_on_delay_report_task</a> from api_rf_comm.o(i.rf_power_on_delay_report_task) referenced from task_433communicate.o(i.Task_RF_Handler_Uninit)
 <LI><a href="#[4e]">rf_set_channel_num_invalid_task</a> from api_rf_comm.o(i.rf_set_channel_num_invalid_task) referenced from api_rf_comm.o(i.rf_receive_data_decode)
 <LI><a href="#[48]">work_control_task</a> from api_work_state.o(i.work_control_task) referenced from task_key.o(i.Task_Key_Handler_Uninit)
 <LI><a href="#[49]">work_even_task</a> from api_work_state.o(i.work_even_task) referenced from task_key.o(i.Task_Key_Handler_Uninit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[46]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[62]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[15c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[15d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[51]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[15e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[15f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[27]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[160]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim3_pwm_duty
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_send
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_keccakf
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_comm_task
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_keccakf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[162]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_keccakf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_write
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_getotal
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_write
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_usage
</UL>

<P><STRONG><a name="[163]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_inarray
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_version
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_depkg
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_write
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_read
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_write2flash
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_send
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_get
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_keccakf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_mask_remove
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_write
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_read
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_write2flash
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_uart2_interrupt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_msg_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_init_data
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_version
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_Out
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_In
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_COM_InitSubFuncInfoStruct
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_read
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_getallindex
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_read
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[152]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_version
</UL>

<P><STRONG><a name="[153]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_version
</UL>

<P><STRONG><a name="[137]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_get_date_and_time
</UL>

<P><STRONG><a name="[11e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_msg_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_write
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_rmallindex
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_remove
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_write
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_chip_cleanAll
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_write2flash
</UL>

<P><STRONG><a name="[5b]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>

<P><STRONG><a name="[5d]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_get_date_and_time
</UL>

<P><STRONG><a name="[5f]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[168]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[61]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[63]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[169]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>Add_SubIREmitTask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task_iremit.o(i.Add_SubIREmitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Add_SubIREmitTask &rArr; Task_COM_AddCycFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_COM_AddCycFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
</UL>

<P><STRONG><a name="[66]"></a>CMT2300A_AutoSwitchStatus</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, cmt2300a.o(i.CMT2300A_AutoSwitchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_us
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GetChipStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoTx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoSleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoRx
</UL>

<P><STRONG><a name="[6b]"></a>CMT2300A_ClearInterruptFlags</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, cmt2300a.o(i.CMT2300A_ClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CMT2300A_ClearInterruptFlags &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Go2RXMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
</UL>

<P><STRONG><a name="[6c]"></a>CMT2300A_ClearRxFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_ClearRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_ClearRxFifo &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Go2RXMode
</UL>

<P><STRONG><a name="[6d]"></a>CMT2300A_ClearTxFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_ClearTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_ClearTxFifo &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
</UL>

<P><STRONG><a name="[6e]"></a>CMT2300A_ConfigGpio</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_ConfigGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_ConfigGpio &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[6f]"></a>CMT2300A_ConfigInterrupt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmt2300a.o(i.CMT2300A_ConfigInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CMT2300A_ConfigInterrupt &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[70]"></a>CMT2300A_ConfigRegBank</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cmt2300a.o(i.CMT2300A_ConfigRegBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CMT2300A_ConfigRegBank &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[71]"></a>CMT2300A_Device_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, radio.o(i.CMT2300A_Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CMT2300A_Device_Init &rArr; RF_Init &rArr; RF_Config &rArr; CMT2300A_GoSleep &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Go2RXMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_IsExist
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_Uninit
</UL>

<P><STRONG><a name="[77]"></a>CMT2300A_Device_ReInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio.o(i.CMT2300A_Device_ReInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CMT2300A_Device_ReInit &rArr; RF_Init &rArr; RF_Config &rArr; CMT2300A_GoSleep &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyChannel
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_IsExist
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
</UL>

<P><STRONG><a name="[79]"></a>CMT2300A_EnableInterrupt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_EnableInterrupt &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[7a]"></a>CMT2300A_EnableLfosc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_EnableLfosc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_EnableLfosc &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
</UL>

<P><STRONG><a name="[7b]"></a>CMT2300A_EnableReadFifo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_EnableReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_EnableReadFifo &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Go2RXMode
</UL>

<P><STRONG><a name="[7c]"></a>CMT2300A_EnableWriteFifo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_EnableWriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_EnableWriteFifo &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
</UL>

<P><STRONG><a name="[69]"></a>CMT2300A_GetChipStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GetChipStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>

<P><STRONG><a name="[75]"></a>CMT2300A_Go2RXMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, radio.o(i.CMT2300A_Go2RXMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CMT2300A_Go2RXMode &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPktType
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoRx
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableReadFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_Init
</UL>

<P><STRONG><a name="[7f]"></a>CMT2300A_GoRx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GoRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CMT2300A_GoRx &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Go2RXMode
</UL>

<P><STRONG><a name="[80]"></a>CMT2300A_GoSleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GoSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CMT2300A_GoSleep &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[7d]"></a>CMT2300A_GoStby</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GoStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Go2RXMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
</UL>

<P><STRONG><a name="[81]"></a>CMT2300A_GoTx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GoTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CMT2300A_GoTx &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
</UL>

<P><STRONG><a name="[82]"></a>CMT2300A_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CMT2300A_Init &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SoftReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableLfosc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[85]"></a>CMT2300A_InitGpio</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmt2300a_hal.o(i.CMT2300A_InitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CMT2300A_InitGpio &rArr; cmt_spi3_init &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_In
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[73]"></a>CMT2300A_IsExist</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cmt2300a.o(i.CMT2300A_IsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CMT2300A_IsExist &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_ReInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_Init
</UL>

<P><STRONG><a name="[88]"></a>CMT2300A_ReadFifo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmt2300a_hal.o(i.CMT2300A_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CMT2300A_ReadFifo &rArr; cmt_spi3_read_fifo &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>CMT2300A_ReadReg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmt2300a_hal.o(i.CMT2300A_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPktType
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPayloadLength
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_IsExist
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GetChipStatus
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableWriteFifo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableReadFifo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableLfosc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigInterrupt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearTxFifo
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[78]"></a>CMT2300A_SetFrequencyChannel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_SetFrequencyChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_SetFrequencyChannel &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_comm_task
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_ReInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_Uninit
</UL>

<P><STRONG><a name="[74]"></a>CMT2300A_SetFrequencyStep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_SetFrequencyStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_SetFrequencyStep &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_ReInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_Init
</UL>

<P><STRONG><a name="[8b]"></a>CMT2300A_SetPayloadLength</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_SetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_SetPayloadLength &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
</UL>

<P><STRONG><a name="[7e]"></a>CMT2300A_SetPktType</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_SetPktType))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_SetPktType &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Go2RXMode
</UL>

<P><STRONG><a name="[83]"></a>CMT2300A_SoftReset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CMT2300A_SoftReset &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
</UL>

<P><STRONG><a name="[8c]"></a>CMT2300A_WriteFifo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmt2300a_hal.o(i.CMT2300A_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CMT2300A_WriteFifo &rArr; cmt_spi3_write_fifo &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
</UL>

<P><STRONG><a name="[67]"></a>CMT2300A_WriteReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmt2300a_hal.o(i.CMT2300A_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyChannel
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SoftReset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPktType
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPayloadLength
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_IsExist
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableWriteFifo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableReadFifo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableLfosc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableInterrupt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigRegBank
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigInterrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigGpio
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearTxFifo
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[36]"></a>DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>Del_SubIREmitTask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task_iremit.o(i.Del_SubIREmitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Del_SubIREmitTask &rArr; Task_Com_DelCycFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_DelCycFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_it_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
</UL>

<P><STRONG><a name="[33]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32g0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = EXTI4_15_IRQHandler &rArr; CMT2300A_ClearInterruptFlags &rArr; CMT2300A_WriteReg &rArr; cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_RequestFuncState
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadFifo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>HAL_Control_DeviceInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_control_export_api.o(i.HAL_Control_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = HAL_Control_DeviceInit &rArr; memory_init &rArr; memory_get_dev_addr &rArr; sha3 &rArr; sha3_update &rArr; sha3_keccakf &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Control_UartInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_DeviceInitTask
</UL>

<P><STRONG><a name="[98]"></a>HAL_Control_UartInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, hal_control_uart.o(i.HAL_Control_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Control_UartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Control_DeviceInit
</UL>

<P><STRONG><a name="[a9]"></a>HAL_ERROR_FuncPointJumpArguCheck</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_control_error.o(i.HAL_ERROR_FuncPointJumpArguCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Serial_MainLoop
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_MainLoop
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED_MainLoop
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Key_MainLoop
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_IREmit_MainLoop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_TaskRun
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_TimeCounterHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_IO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_control_gpio.o(i.HAL_IO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Control_DeviceInit
</UL>

<P><STRONG><a name="[9c]"></a>HAL_IO_ReadPin</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hal_control_gpio.o(i.HAL_IO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IO_ReadPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[a1]"></a>HAL_IO_SetState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_control_gpio.o(i.HAL_IO_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IO_SetState &rArr; HAL_IO_TogglePin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_TogglePin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_SetPin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED_Handler_Run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED_Handler_IDLE
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_Run
</UL>

<P><STRONG><a name="[a4]"></a>HAL_SM_ChangeNodeState</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hal_sm_mainloop.o(i.HAL_SM_ChangeNodeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SM_ChangeNodeState
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_DeviceInitTask
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_IREmit_Handler_Uninit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Serial_Handler_Uninit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED_Handler_Uninit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Key_Handler_Uninit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_Uninit
</UL>

<P><STRONG><a name="[0]"></a>HAL_SM_DeviceInitTask</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_sm_inittask_api.o(i.HAL_SM_DeviceInitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = HAL_SM_DeviceInitTask &rArr; HAL_Control_DeviceInit &rArr; memory_init &rArr; memory_get_dev_addr &rArr; sha3 &rArr; sha3_update &rArr; sha3_keccakf &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_ChangeNodeState
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Control_DeviceInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_sm_mainloop.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>HAL_SM_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hal_sm_mainloop.o(i.HAL_SM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_SM_Init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_MainLoop
</UL>

<P><STRONG><a name="[a6]"></a>HAL_SM_MainLoop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_sm_mainloop.o(i.HAL_SM_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_SM_MainLoop &rArr; HAL_SM_Init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_TimeCounter
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_TaskRun
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>HAL_SM_RequestFuncNode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_sm_mainloop.o(i.HAL_SM_RequestFuncNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SM_RequestFuncNode
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_IREmit_Handler_Uninit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Serial_Handler_Uninit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED_Handler_Uninit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Key_Handler_Uninit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_Uninit
</UL>

<P><STRONG><a name="[91]"></a>HAL_SM_RequestFuncState</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_sm_mainloop.o(i.HAL_SM_RequestFuncState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SM_RequestFuncState
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_SM_TaskRun</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hal_sm_mainloop.o(i.HAL_SM_TaskRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SM_TaskRun &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_MainLoop
</UL>

<P><STRONG><a name="[a8]"></a>HAL_SM_TimeCounter</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, hal_sm_mainloop.o(i.HAL_SM_TimeCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SM_TimeCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_MainLoop
</UL>

<P><STRONG><a name="[29]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>Int_FLASH_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_flash.o(i.Int_FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>

<P><STRONG><a name="[af]"></a>Int_FLASH_ErasePage</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, driver_flash.o(i.Int_FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Int_FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>

<P><STRONG><a name="[b1]"></a>Int_FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_flash.o(i.Int_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>

<P><STRONG><a name="[b2]"></a>Int_FLASH_ProgramDoubleWord</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, driver_flash.o(i.Int_FLASH_ProgramDoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Int_FLASH_ProgramDoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write_nocheck
</UL>

<P><STRONG><a name="[ad]"></a>Int_FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_flash.o(i.Int_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>

<P><STRONG><a name="[aa]"></a>Int_flash_read</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, driver_flash.o(i.Int_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Int_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read_double_word
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_version_num_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_sp_mode_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_host_addr_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_group_flag_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_dev_addr_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_date_and_time_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_channel_num_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>

<P><STRONG><a name="[ab]"></a>Int_flash_read_double_word</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_flash.o(i.Int_flash_read_double_word))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read
</UL>

<P><STRONG><a name="[ac]"></a>Int_flash_write</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, driver_flash.o(i.Int_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Int_flash_write &rArr; Int_flash_write_nocheck &rArr; Int_FLASH_ProgramDoubleWord
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write_nocheck
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_FLASH_Unlock
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_FLASH_Lock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_FLASH_ErasePage
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_dev_addr_write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_date_and_time_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_host_addr_write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_group_flag_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_channel_num_write
</UL>

<P><STRONG><a name="[b0]"></a>Int_flash_write_nocheck</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, driver_flash.o(i.Int_flash_write_nocheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Int_flash_write_nocheck &rArr; Int_FLASH_ProgramDoubleWord
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_FLASH_ProgramDoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>

<P><STRONG><a name="[c8]"></a>LL_EXTI_Init</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, stm32g0xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[c7]"></a>LL_GPIO_Init</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, stm32g0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_Out
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_In
</UL>

<P><STRONG><a name="[b3]"></a>LL_Init1msTick</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g0xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b4]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[b8]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[d2]"></a>LL_SPI_Init</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, stm32g0xx_ll_spi.o(i.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[ea]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d7]"></a>LL_TIM_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
</UL>

<P><STRONG><a name="[b9]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_TIM_OC_Init &rArr; OC4Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC6Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC5Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c0]"></a>LL_USART_Init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, stm32g0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[fc]"></a>LL_mDelay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g0xx_ll_utils.o(i.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falsh_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker_spt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker
</UL>

<P><STRONG><a name="[c1]"></a>MX_DMA_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>MX_GPIO_Init</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>MX_SPI1_Init</STRONG> (Thumb, 356 bytes, Stack size 88 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_SPI1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>MX_TIM14_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tim.o(i.MX_TIM14_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM14_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>MX_TIM1_Init</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_TIM1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>MX_TIM3_Init</STRONG> (Thumb, 186 bytes, Stack size 104 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM3_Init &rArr; LL_TIM_OC_Init &rArr; OC4Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_USART2_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>RFSendPacket</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, radio.o(i.RFSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = RFSendPacket &rArr; CMT2300A_Device_ReInit &rArr; RF_Init &rArr; RF_Config &rArr; CMT2300A_GoSleep &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Go2RXMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_ReInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteFifo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPktType
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPayloadLength
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoTx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableWriteFifo
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_comm_task
</UL>

<P><STRONG><a name="[e6]"></a>RF_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, radio.o(i.RF_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RF_Config &rArr; CMT2300A_GoSleep &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoSleep
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableLfosc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableInterrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigInterrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[72]"></a>RF_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, radio.o(i.RF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RF_Init &rArr; RF_Config &rArr; CMT2300A_GoSleep &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_InitGpio
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigRegBank
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_ReInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_Init
</UL>

<P><STRONG><a name="[86]"></a>ResetIOMode_In</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, gpio_defs.o(i.ResetIOMode_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ResetIOMode_In &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_InitGpio
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>

<P><STRONG><a name="[e7]"></a>ResetIOMode_Out</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, gpio_defs.o(i.ResetIOMode_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
</UL>

<P><STRONG><a name="[2a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_time_counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>SystemClock_Config</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemClock_Config &rArr; LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32g0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>TIM14_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g0xx_it.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIM14_IRQHandler &rArr; ircode_emit_it_handler &rArr; Del_SubIREmitTask &rArr; Task_Com_DelCycFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_it_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM1_BRK_UP_TRG_COM_IRQHandler &rArr; ircode_outime_it_handler &rArr; ircode_catch_send &rArr; serial_inpkg &rArr; hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_outime_it_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32g0xx_it.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_CC_IRQHandler &rArr; ircode_catch_it_handler &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_it_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Task_COM_AddCycFunc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, task_commonfile.o(i.Task_COM_AddCycFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_COM_AddCycFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_SubIREmitTask
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Key_Handler_Uninit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_Uninit
</UL>

<P><STRONG><a name="[ee]"></a>Task_COM_InitSubFuncInfoStruct</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_commonfile.o(i.Task_COM_InitSubFuncInfoStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Task_COM_InitSubFuncInfoStruct &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_IREmit_Handler_Uninit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Key_Handler_Uninit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_Uninit
</UL>

<P><STRONG><a name="[90]"></a>Task_Com_DelCycFunc</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, task_commonfile.o(i.Task_Com_DelCycFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Task_Com_DelCycFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_SubIREmitTask
</UL>

<P><STRONG><a name="[ef]"></a>Task_Com_TimeCounterHandler</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, task_commonfile.o(i.Task_Com_TimeCounterHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Task_Com_TimeCounterHandler &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_IREmit_Handler_IDLE
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Key_Handler_IDLE
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_IDLE
</UL>

<P><STRONG><a name="[13]"></a>Task_IREmit_Handler_IDLE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, task_iremit.o(i.Task_IREmit_Handler_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Task_IREmit_Handler_IDLE &rArr; Task_Com_TimeCounterHandler &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_TimeCounterHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_iremit.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>Task_IREmit_Handler_Run</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_iremit.o(i.Task_IREmit_Handler_Run))
<BR>[Address Reference Count : 1]<UL><LI> task_iremit.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Task_IREmit_Handler_Uninit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, task_iremit.o(i.Task_IREmit_Handler_Uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Task_IREmit_Handler_Uninit &rArr; Task_COM_InitSubFuncInfoStruct &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_ChangeNodeState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_RequestFuncNode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_COM_InitSubFuncInfoStruct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_iremit.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Task_IREmit_MainLoop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_iremit.o(i.Task_IREmit_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_IREmit_MainLoop &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_sm_mainloop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Task_Key_Handler_IDLE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, task_key.o(i.Task_Key_Handler_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Task_Key_Handler_IDLE &rArr; Task_Com_TimeCounterHandler &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_TimeCounterHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_key.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Task_Key_Handler_Run</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_key.o(i.Task_Key_Handler_Run))
<BR>[Address Reference Count : 1]<UL><LI> task_key.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Task_Key_Handler_Uninit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, task_key.o(i.Task_Key_Handler_Uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Task_Key_Handler_Uninit &rArr; Task_COM_InitSubFuncInfoStruct &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_ChangeNodeState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_state_RequestInfo
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_COM_AddCycFunc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_RequestFuncNode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_COM_InitSubFuncInfoStruct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_key.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Task_Key_MainLoop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_key.o(i.Task_Key_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_Key_MainLoop &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_sm_mainloop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Task_LED_Handler_IDLE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task_led.o(i.Task_LED_Handler_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Task_LED_Handler_IDLE &rArr; HAL_IO_SetState &rArr; HAL_IO_TogglePin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_SetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_led.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Task_LED_Handler_Run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_led.o(i.Task_LED_Handler_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Task_LED_Handler_Run &rArr; HAL_IO_SetState &rArr; HAL_IO_TogglePin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_SetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_led.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Task_LED_Handler_Uninit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, task_led.o(i.Task_LED_Handler_Uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_LED_Handler_Uninit &rArr; HAL_SM_ChangeNodeState
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_ChangeNodeState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_RequestFuncNode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_led.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>Task_LED_MainLoop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, task_led.o(i.Task_LED_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_LED_MainLoop &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_sm_mainloop.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Task_RF_Handler_IDLE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, task_433communicate.o(i.Task_RF_Handler_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Task_RF_Handler_IDLE &rArr; Task_Com_TimeCounterHandler &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_TimeCounterHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_433communicate.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Task_RF_Handler_Run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_433communicate.o(i.Task_RF_Handler_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Task_RF_Handler_Run &rArr; HAL_IO_SetState &rArr; HAL_IO_TogglePin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_SetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_433communicate.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Task_RF_Handler_Uninit</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, task_433communicate.o(i.Task_RF_Handler_Uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Task_RF_Handler_Uninit &rArr; CMT2300A_Device_Init &rArr; RF_Init &rArr; RF_Config &rArr; CMT2300A_GoSleep &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_ChangeNodeState
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_COM_AddCycFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyChannel
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_comm_RequestRFInfo
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_address_respond_or_initiate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_RequestFuncNode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_COM_InitSubFuncInfoStruct
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_433communicate.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Task_RF_MainLoop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_433communicate.o(i.Task_RF_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_RF_MainLoop &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_sm_mainloop.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Task_Serial_Handler_IDLE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, task_serial.o(i.Task_Serial_Handler_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Task_Serial_Handler_IDLE &rArr; serial_msg_handler &rArr; serial_depkg &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_msg_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_serial.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Task_Serial_Handler_Run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_serial.o(i.Task_Serial_Handler_Run))
<BR>[Address Reference Count : 1]<UL><LI> task_serial.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Task_Serial_Handler_Uninit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, task_serial.o(i.Task_Serial_Handler_Uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_Serial_Handler_Uninit &rArr; HAL_SM_ChangeNodeState
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_ChangeNodeState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_RequestFuncNode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_serial.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Task_Serial_MainLoop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, task_serial.o(i.Task_Serial_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_Serial_MainLoop &rArr; HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ERROR_FuncPointJumpArguCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_sm_mainloop.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; hal_control_uart2_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_uart2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_control_gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_ReadPin
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_TogglePin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_SetPin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_ResetPin
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[16b]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[16c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[16e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f6]"></a>cmt_spi3_delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmt_spi3.o(i.cmt_spi3_delay))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_recv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
</UL>

<P><STRONG><a name="[f9]"></a>cmt_spi3_delay_us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmt_spi3.o(i.cmt_spi3_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
</UL>

<P><STRONG><a name="[87]"></a>cmt_spi3_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmt_spi3.o(i.cmt_spi3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cmt_spi3_init &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_Out
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_InitGpio
</UL>

<P><STRONG><a name="[8a]"></a>cmt_spi3_read</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cmt_spi3.o(i.cmt_spi3_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cmt_spi3_read &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_Out
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_In
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_recv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>

<P><STRONG><a name="[89]"></a>cmt_spi3_read_fifo</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, cmt_spi3.o(i.cmt_spi3_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cmt_spi3_read_fifo &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_Out
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_In
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_recv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay_us
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadFifo
</UL>

<P><STRONG><a name="[f8]"></a>cmt_spi3_recv</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cmt_spi3.o(i.cmt_spi3_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmt_spi3_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>

<P><STRONG><a name="[f7]"></a>cmt_spi3_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cmt_spi3.o(i.cmt_spi3_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmt_spi3_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>

<P><STRONG><a name="[8e]"></a>cmt_spi3_write</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, cmt_spi3.o(i.cmt_spi3_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cmt_spi3_write &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_Out
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_In
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>

<P><STRONG><a name="[8d]"></a>cmt_spi3_write_fifo</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, cmt_spi3.o(i.cmt_spi3_write_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cmt_spi3_write_fifo &rArr; ResetIOMode_Out &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_Out
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIOMode_In
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay_us
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteFifo
</UL>

<P><STRONG><a name="[144]"></a>falsh_get_jedec</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 25qflash.o(i.falsh_get_jedec))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_handshake
</UL>

<P><STRONG><a name="[fa]"></a>falsh_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 25qflash.o(i.falsh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = falsh_init &rArr; flash_reset &rArr; flash_busy_stat_outime_checker &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_spi_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>flash_busy_stat_outime_checker_spt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, 25qflash.o(i.flash_busy_stat_outime_checker_spt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_mask_remove
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_chip_cleanAll
</UL>

<P><STRONG><a name="[102]"></a>flash_chip_erase</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, 25qflash.o(i.flash_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_chip_erase &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writen
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker_spt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_wr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_chip_cleanAll
</UL>

<P><STRONG><a name="[105]"></a>flash_fread</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, 25qflash.o(i.flash_fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker_spt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_wr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_write
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_read
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_write2flash
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
</UL>

<P><STRONG><a name="[fe]"></a>flash_read_jedec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, 25qflash.o(i.flash_read_jedec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_read_jedec &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falsh_init
</UL>

<P><STRONG><a name="[100]"></a>flash_read_status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, 25qflash.o(i.flash_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker_spt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker
</UL>

<P><STRONG><a name="[107]"></a>flash_release_buf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 25qflash.o(i.flash_release_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_release_buf &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_msg_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
</UL>

<P><STRONG><a name="[108]"></a>flash_release_buf_w</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, 25qflash.o(i.flash_release_buf_w))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_release_buf_w &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_msg_handler
</UL>

<P><STRONG><a name="[fd]"></a>flash_reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, 25qflash.o(i.flash_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flash_reset &rArr; flash_busy_stat_outime_checker &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_wr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falsh_init
</UL>

<P><STRONG><a name="[109]"></a>flash_sector_erase</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, 25qflash.o(i.flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_sector_erase &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writen
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker_spt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_mask_remove
</UL>

<P><STRONG><a name="[e8]"></a>flash_time_counter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 25qflash.o(i.flash_time_counter))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10b]"></a>flash_write</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, 25qflash.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = flash_write &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writen
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker_spt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_wr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_write
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_write
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_chip_cleanAll
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_write2flash
</UL>

<P><STRONG><a name="[103]"></a>flash_writen</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 25qflash.o(i.flash_writen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_writen &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
</UL>

<P><STRONG><a name="[106]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_remove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_delate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_creat
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_release_buf_w
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_release_buf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_msg_handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_free_data
</UL>

<P><STRONG><a name="[10c]"></a>gen_link_add</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gen_link_list.o(i.gen_link_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gen_link_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
</UL>

<P><STRONG><a name="[10d]"></a>gen_link_creat</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gen_link_list.o(i.gen_link_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gen_link_creat &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
</UL>

<P><STRONG><a name="[10e]"></a>gen_link_delate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gen_link_list.o(i.gen_link_delate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_link_delate &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
</UL>

<P><STRONG><a name="[10f]"></a>gen_link_get</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, gen_link_list.o(i.gen_link_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gen_link_get &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_get
</UL>

<P><STRONG><a name="[111]"></a>gen_link_remove</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gen_link_list.o(i.gen_link_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_link_remove &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_get
</UL>

<P><STRONG><a name="[fb]"></a>hal_control_spi_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_control_spi.o(i.hal_control_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_control_spi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falsh_init
</UL>

<P><STRONG><a name="[10a]"></a>hal_control_spi_rw</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, hal_control_spi.o(i.hal_control_spi_rw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_wr
</UL>

<P><STRONG><a name="[f5]"></a>hal_control_uart2_interrupt</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, hal_control_uart.o(i.hal_control_uart2_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_control_uart2_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>hal_control_uart2_send</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hal_control_uart.o(i.hal_control_uart2_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>

<P><STRONG><a name="[116]"></a>ircode_catch_enable</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ircode_catch.o(i.ircode_catch_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ircode_catch_enable &rArr; ircode_catch_init_data &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_init_data
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_free_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_enable
</UL>

<P><STRONG><a name="[118]"></a>ircode_catch_free_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ircode_catch.o(i.ircode_catch_free_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ircode_catch_free_data &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_it_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_inarray
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_write2flash
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_send2serial
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_handler_timeout
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_init_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_enable
</UL>

<P><STRONG><a name="[11f]"></a>ircode_catch_get_p</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ircode_catch.o(i.ircode_catch_get_p))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_it_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_inarray
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_write2flash
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_directSend
</UL>

<P><STRONG><a name="[117]"></a>ircode_catch_init_data</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ircode_catch.o(i.ircode_catch_init_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ircode_catch_init_data &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_free_data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_inarray
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_enable
</UL>

<P><STRONG><a name="[ed]"></a>ircode_catch_it_handler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ircode_catch.o(i.ircode_catch_it_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ircode_catch_it_handler &rArr; LL_TIM_IC_SetPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>ircode_catch_send</STRONG> (Thumb, 112 bytes, Stack size 280 bytes, ircode_catch.o(i.ircode_catch_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ircode_catch_send &rArr; serial_inpkg &rArr; hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_outime_it_handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_send2serial
</UL>

<P><STRONG><a name="[11c]"></a>ircode_emit_addcode</STRONG> (Thumb, 444 bytes, Stack size 112 bytes, ircode_emit.o(i.ircode_emit_addcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ircode_emit_addcode &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_release_buf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_init_data
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_get_p
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_free_data
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
</UL>

<P><STRONG><a name="[121]"></a>ircode_emit_directSend</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ircode_emit.o(i.ircode_emit_directSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ircode_emit_directSend &rArr; ircode_emit_start &rArr; Del_SubIREmitTask &rArr; Task_Com_DelCycFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_get_p
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_directSend
</UL>

<P><STRONG><a name="[4d]"></a>ircode_emit_handler_timeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ircode_emit.o(i.ircode_emit_handler_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ircode_emit_handler_timeout &rArr; ircode_catch_free_data &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim3_pwm_deinit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim14_stop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_free_data
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ircode_emit.o(i.ircode_emit_start)
<LI> ircode_emit.o(i.ircode_emit_it_handler)
</UL>
<P><STRONG><a name="[124]"></a>ircode_emit_inarray</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ircode_emit.o(i.ircode_emit_inarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ircode_emit_inarray &rArr; ircode_emit_start &rArr; Del_SubIREmitTask &rArr; Task_Com_DelCycFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_init_data
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_get_p
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_free_data
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_send2IR
</UL>

<P><STRONG><a name="[eb]"></a>ircode_emit_it_handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ircode_emit.o(i.ircode_emit_it_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ircode_emit_it_handler &rArr; Del_SubIREmitTask &rArr; Task_Com_DelCycFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim3_pwm_duty
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim3_pwm_deinit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim14_stop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim14_setime
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_SubIREmitTask
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_get_p
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_free_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>ircode_emit_start</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ircode_emit.o(i.ircode_emit_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ircode_emit_start &rArr; Del_SubIREmitTask &rArr; Task_Com_DelCycFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim3_pwm_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim3_pwm_duty
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_tim14_setime
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_SubIREmitTask
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_SubIREmitTask
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_nctoh
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_get_p
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_inarray
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_directSend
</UL>

<P><STRONG><a name="[129]"></a>ircode_htonc</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ircode_catch.o(i.ircode_htonc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ircode_htonc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_outime_it_handler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_nctoh
</UL>

<P><STRONG><a name="[143]"></a>ircode_ircode_emit_getInArrayNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ircode_emit.o(i.ircode_ircode_emit_getInArrayNum))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_send2IR
</UL>

<P><STRONG><a name="[128]"></a>ircode_nctoh</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ircode_catch.o(i.ircode_nctoh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ircode_nctoh &rArr; ircode_htonc
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_htonc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
</UL>

<P><STRONG><a name="[ec]"></a>ircode_outime_it_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ircode_catch.o(i.ircode_outime_it_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ircode_outime_it_handler &rArr; ircode_catch_send &rArr; serial_inpkg &rArr; hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_htonc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>key_clear_evens</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_key.o(i.key_clear_evens))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_even_task
</UL>

<P><STRONG><a name="[47]"></a>key_scan_task</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, driver_key.o(i.key_scan_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = key_scan_task &rArr; key_scan &rArr; HAL_IO_ReadPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_key.o(i.Task_Key_Handler_Uninit)
</UL>
<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main &rArr; mmc_ircode_addr_flash &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_inarray
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falsh_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_MainLoop
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Control_UartInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_creat
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SM_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_COM_InitSubFuncInfoStruct
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_depkg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_init_data
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[141]"></a>memopt_index_get_index_mask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serialctrl_memopt.o(i.memopt_index_get_index_mask))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_getotal
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_write
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_usage
</UL>

<P><STRONG><a name="[12b]"></a>memopt_index_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, serialctrl_memopt.o(i.memopt_index_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = memopt_index_init &rArr; flash_write &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_release_buf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker_spt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>memopt_index_mask_remove</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, serialctrl_memopt.o(i.memopt_index_mask_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = memopt_index_mask_remove &rArr; flash_sector_erase &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker_spt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_rmallindex
</UL>

<P><STRONG><a name="[11d]"></a>memopt_index_read</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, serialctrl_memopt.o(i.memopt_index_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_release_buf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_write
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_setredy_stat
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_read
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_getallindex
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_write
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_usage
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_read
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_write2flash
</UL>

<P><STRONG><a name="[12e]"></a>memopt_index_remove</STRONG> (Thumb, 216 bytes, Stack size 344 bytes, serialctrl_memopt.o(i.memopt_index_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = memopt_index_remove &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_release_buf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_remove
</UL>

<P><STRONG><a name="[12f]"></a>memopt_index_write</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, serialctrl_memopt.o(i.memopt_index_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = memopt_index_write &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_setredy_stat
</UL>

<P><STRONG><a name="[130]"></a>memory_channel_num_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, driver_memory.o(i.memory_channel_num_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = memory_channel_num_read &rArr; Int_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_channel_num_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[131]"></a>memory_channel_num_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver_memory.o(i.memory_channel_num_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = memory_channel_num_write &rArr; Int_flash_write &rArr; Int_flash_write_nocheck &rArr; Int_FLASH_ProgramDoubleWord
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_channel_num_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[132]"></a>memory_date_and_time_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, driver_memory.o(i.memory_date_and_time_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = memory_date_and_time_read &rArr; Int_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_date_and_time_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[133]"></a>memory_date_and_time_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver_memory.o(i.memory_date_and_time_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = memory_date_and_time_write &rArr; Int_flash_write &rArr; Int_flash_write_nocheck &rArr; Int_FLASH_ProgramDoubleWord
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_date_and_time_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[134]"></a>memory_dev_addr_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, driver_memory.o(i.memory_dev_addr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = memory_dev_addr_read &rArr; Int_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_dev_addr_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[135]"></a>memory_dev_addr_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver_memory.o(i.memory_dev_addr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = memory_dev_addr_write &rArr; Int_flash_write &rArr; Int_flash_write_nocheck &rArr; Int_FLASH_ProgramDoubleWord
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_dev_addr_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[136]"></a>memory_get_date_and_time</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, driver_memory.o(i.memory_get_date_and_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = memory_get_date_and_time &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[138]"></a>memory_get_dev_addr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, driver_memory.o(i.memory_get_dev_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = memory_get_dev_addr &rArr; sha3 &rArr; sha3_update &rArr; sha3_keccakf &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[13a]"></a>memory_group_flag_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, driver_memory.o(i.memory_group_flag_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = memory_group_flag_read &rArr; Int_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_group_flag_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[13b]"></a>memory_group_flag_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver_memory.o(i.memory_group_flag_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = memory_group_flag_write &rArr; Int_flash_write &rArr; Int_flash_write_nocheck &rArr; Int_FLASH_ProgramDoubleWord
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_group_flag_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[13c]"></a>memory_host_addr_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, driver_memory.o(i.memory_host_addr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = memory_host_addr_read &rArr; Int_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_host_addr_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[13d]"></a>memory_host_addr_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver_memory.o(i.memory_host_addr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = memory_host_addr_write &rArr; Int_flash_write &rArr; Int_flash_write_nocheck &rArr; Int_FLASH_ProgramDoubleWord
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_host_addr_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
</UL>

<P><STRONG><a name="[96]"></a>memory_init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, driver_memory.o(i.memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = memory_init &rArr; memory_get_dev_addr &rArr; sha3 &rArr; sha3_update &rArr; sha3_keccakf &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_version_num_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_sp_mode_read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_read_chip_uniqueid
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_host_addr_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_group_flag_read
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_get_dev_addr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_get_date_and_time
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_dev_addr_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_dev_addr_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_date_and_time_write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_date_and_time_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_channel_num_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_group_flag_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_channel_num_write
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Control_DeviceInit
</UL>

<P><STRONG><a name="[140]"></a>memory_read_chip_uniqueid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_memory.o(i.memory_read_chip_uniqueid))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[13f]"></a>memory_sp_mode_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, driver_memory.o(i.memory_sp_mode_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = memory_sp_mode_read &rArr; Int_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[13e]"></a>memory_version_num_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, driver_memory.o(i.memory_version_num_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = memory_version_num_read &rArr; Int_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[12c]"></a>mmc_ircode_addr_flash</STRONG> (Thumb, 530 bytes, Stack size 160 bytes, serialctrl_ircaddrproc.o(i.mmc_ircode_addr_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mmc_ircode_addr_flash &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_remove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_delate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_creat
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_add
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_get_index_mask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_remove
</UL>

<P><STRONG><a name="[142]"></a>mmc_ircode_addr_get</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, serialctrl_ircaddrproc.o(i.mmc_ircode_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mmc_ircode_addr_get &rArr; gen_link_get &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_remove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_link_get
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
</UL>

<P><STRONG><a name="[125]"></a>mx_tim14_setime</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tim.o(i.mx_tim14_setime))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_it_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
</UL>

<P><STRONG><a name="[122]"></a>mx_tim14_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tim.o(i.mx_tim14_stop))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_it_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_handler_timeout
</UL>

<P><STRONG><a name="[123]"></a>mx_tim3_pwm_deinit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tim.o(i.mx_tim3_pwm_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_it_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_handler_timeout
</UL>

<P><STRONG><a name="[126]"></a>mx_tim3_pwm_duty</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tim.o(i.mx_tim3_pwm_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mx_tim3_pwm_duty &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_it_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
</UL>

<P><STRONG><a name="[127]"></a>mx_tim3_pwm_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tim.o(i.mx_tim3_pwm_init))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_start
</UL>

<P><STRONG><a name="[145]"></a>queue_de</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, system_queue.o(i.queue_de))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_de &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_comm_task
</UL>

<P><STRONG><a name="[93]"></a>queue_de_discard</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_queue.o(i.queue_de_discard))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_de_discard &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_initiate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_address_respond_or_initiate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_unbound_respond
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_respond
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_version
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_query_respond
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_handshake_respond_or_initiate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_group_respond
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_channel_respond
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bound_respond
</UL>

<P><STRONG><a name="[94]"></a>queue_en</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, system_queue.o(i.queue_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_initiate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_address_respond_or_initiate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_unbound_respond
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_respond
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_version
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_query_respond
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_handshake_respond_or_initiate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_group_respond
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_channel_respond
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bound_respond
</UL>

<P><STRONG><a name="[76]"></a>queue_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, system_queue.o(i.queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = queue_init &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Device_Init
</UL>

<P><STRONG><a name="[f3]"></a>rf_address_respond_or_initiate</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, api_rf_comm.o(i.rf_address_respond_or_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rf_address_respond_or_initiate &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_Uninit
</UL>

<P><STRONG><a name="[f2]"></a>rf_comm_RequestRFInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api_rf_comm.o(i.rf_comm_RequestRFInfo))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RF_Handler_Uninit
</UL>

<P><STRONG><a name="[4b]"></a>rf_comm_task</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, api_rf_comm.o(i.rf_comm_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rf_comm_task &rArr; rf_receive_data_decode &rArr; ircode_emit_addcode &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFSendPacket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_433communicate.o(i.Task_RF_Handler_Uninit)
</UL>
<P><STRONG><a name="[4c]"></a>rf_data_packet_num_reset_task</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api_rf_comm.o(i.rf_data_packet_num_reset_task))
<BR>[Address Reference Count : 1]<UL><LI> task_433communicate.o(i.Task_RF_Handler_Uninit)
</UL>
<P><STRONG><a name="[4a]"></a>rf_power_on_delay_report_task</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api_rf_comm.o(i.rf_power_on_delay_report_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rf_power_on_delay_report_task &rArr; rf_handshake_respond_or_initiate &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_handshake_respond_or_initiate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_433communicate.o(i.Task_RF_Handler_Uninit)
</UL>
<P><STRONG><a name="[151]"></a>rf_report_initiate</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, api_rf_comm.o(i.rf_report_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rf_report_initiate &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_even_task
</UL>

<P><STRONG><a name="[154]"></a>serial_depkg</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, serialctrl_handler.o(i.serial_depkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = serial_depkg &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_msg_handler
</UL>

<P><STRONG><a name="[11b]"></a>serial_inpkg</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, serialctrl_handler.o(i.serial_inpkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_inpkg &rArr; hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_uart2_send
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_write
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_setredy_stat
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_rmallindex
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_remove
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_read
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_getotal
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_irindex_getallindex
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_write
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_usage
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_read
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_ircode_curient
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_handshake
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_chip_cleanAll
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_write2flash
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_send2serial
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_send2IR
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_enable
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkg_handler_catch_directSend
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_send
</UL>

<P><STRONG><a name="[f4]"></a>serial_msg_handler</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, serialctrl_handler.o(i.serial_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = serial_msg_handler &rArr; serial_depkg &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_release_buf_w
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_release_buf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_depkg
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Serial_Handler_IDLE
</UL>

<P><STRONG><a name="[139]"></a>sha3</STRONG> (Thumb, 42 bytes, Stack size 232 bytes, sha3.o(i.sha3))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = sha3 &rArr; sha3_update &rArr; sha3_keccakf &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_update
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_final
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_get_dev_addr
</UL>

<P><STRONG><a name="[157]"></a>sha3_final</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sha3.o(i.sha3_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = sha3_final &rArr; sha3_keccakf &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_keccakf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3
</UL>

<P><STRONG><a name="[155]"></a>sha3_init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, sha3.o(i.sha3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sha3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3
</UL>

<P><STRONG><a name="[158]"></a>sha3_keccakf</STRONG> (Thumb, 454 bytes, Stack size 480 bytes, sha3.o(i.sha3_keccakf))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = sha3_keccakf &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_update
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_final
</UL>

<P><STRONG><a name="[156]"></a>sha3_update</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, sha3.o(i.sha3_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sha3_update &rArr; sha3_keccakf &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_keccakf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3
</UL>

<P><STRONG><a name="[84]"></a>system_delay_ms</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, cmt2300a_hal.o(i.system_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
</UL>

<P><STRONG><a name="[68]"></a>system_delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmt2300a_hal.o(i.system_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>

<P><STRONG><a name="[48]"></a>work_control_task</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, api_work_state.o(i.work_control_task))
<BR>[Address Reference Count : 1]<UL><LI> task_key.o(i.Task_Key_Handler_Uninit)
</UL>
<P><STRONG><a name="[49]"></a>work_even_task</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, api_work_state.o(i.work_even_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = work_even_task &rArr; rf_report_initiate &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear_evens
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_initiate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_key.o(i.Task_Key_Handler_Uninit)
</UL>
<P><STRONG><a name="[f1]"></a>work_state_RequestInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api_work_state.o(i.work_state_RequestInfo))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Key_Handler_Uninit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c6]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[c3]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[c2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dma.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[cc]"></a>LL_DMA_SetChannelPriorityLevel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi.o(i.LL_DMA_SetChannelPriorityLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[cb]"></a>LL_DMA_SetDataTransferDirection</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(i.LL_DMA_SetDataTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetDataTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[cf]"></a>LL_DMA_SetMemoryIncMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(i.LL_DMA_SetMemoryIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemoryIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[d1]"></a>LL_DMA_SetMemorySize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi.o(i.LL_DMA_SetMemorySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemorySize
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[cd]"></a>LL_DMA_SetMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(i.LL_DMA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[ce]"></a>LL_DMA_SetPeriphIncMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(i.LL_DMA_SetPeriphIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[ca]"></a>LL_DMA_SetPeriphRequest</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi.o(i.LL_DMA_SetPeriphRequest))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[d0]"></a>LL_DMA_SetPeriphSize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi.o(i.LL_DMA_SetPeriphSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphSize
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[d4]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tim.o(i.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
</UL>

<P><STRONG><a name="[d9]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tim.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[d6]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tim.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
</UL>

<P><STRONG><a name="[d5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tim.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
</UL>

<P><STRONG><a name="[de]"></a>LL_DMA_SetChannelPriorityLevel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetChannelPriorityLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[dd]"></a>LL_DMA_SetDataTransferDirection</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetDataTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetDataTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[e1]"></a>LL_DMA_SetMemoryIncMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetMemoryIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemoryIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[e3]"></a>LL_DMA_SetMemorySize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetMemorySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemorySize
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[df]"></a>LL_DMA_SetMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[e0]"></a>LL_DMA_SetPeriphIncMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetPeriphIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[dc]"></a>LL_DMA_SetPeriphRequest</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i.LL_DMA_SetPeriphRequest))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[e2]"></a>LL_DMA_SetPeriphSize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetPeriphSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphSize
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[b6]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[b7]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[b5]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32g0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[e4]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32g0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[bc]"></a>OC1Config</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, stm32g0xx_ll_tim.o(i.OC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[bd]"></a>OC2Config</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.OC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC2Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[ba]"></a>OC3Config</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.OC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC3Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[be]"></a>OC4Config</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.OC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC4Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[bf]"></a>OC5Config</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32g0xx_ll_tim.o(i.OC5Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OC5Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[bb]"></a>OC6Config</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32g0xx_ll_tim.o(i.OC6Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OC6Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[ff]"></a>flash_busy_stat_outime_checker</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, 25qflash.o(i.flash_busy_stat_outime_checker))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = flash_busy_stat_outime_checker &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
</UL>

<P><STRONG><a name="[104]"></a>flash_spi_wr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 25qflash.o(i.flash_spi_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_status
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
</UL>

<P><STRONG><a name="[9b]"></a>LL_DMA_DisableChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_control_uart.o(i.LL_DMA_DisableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_uart2_interrupt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Control_UartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_uart2_send
</UL>

<P><STRONG><a name="[9a]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_control_uart.o(i.LL_DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_uart2_interrupt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Control_UartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_uart2_send
</UL>

<P><STRONG><a name="[99]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_control_uart.o(i.LL_DMA_SetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_uart2_interrupt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Control_UartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_uart2_send
</UL>

<P><STRONG><a name="[112]"></a>LL_DMA_DisableChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_control_spi.o(i.LL_DMA_DisableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_spi_rw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_spi_init
</UL>

<P><STRONG><a name="[114]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_control_spi.o(i.LL_DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_spi_rw
</UL>

<P><STRONG><a name="[113]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_control_spi.o(i.LL_DMA_SetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_control_spi_rw
</UL>

<P><STRONG><a name="[9f]"></a>HAL_IO_ResetPin</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, hal_control_gpio.o(i.HAL_IO_ResetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_IO_ResetPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_SetState
</UL>

<P><STRONG><a name="[a0]"></a>HAL_IO_SetPin</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, hal_control_gpio.o(i.HAL_IO_SetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_IO_SetPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_SetState
</UL>

<P><STRONG><a name="[a2]"></a>HAL_IO_TogglePin</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hal_control_gpio.o(i.HAL_IO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IO_TogglePin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_SetState
</UL>

<P><STRONG><a name="[9e]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_control_gpio.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_ReadPin
</UL>

<P><STRONG><a name="[a3]"></a>LL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_control_gpio.o(i.LL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_TogglePin
</UL>

<P><STRONG><a name="[146]"></a>rf_bound_respond</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, api_rf_comm.o(i.rf_bound_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rf_bound_respond &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
</UL>

<P><STRONG><a name="[147]"></a>rf_channel_respond</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, api_rf_comm.o(i.rf_channel_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rf_channel_respond &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
</UL>

<P><STRONG><a name="[150]"></a>rf_data_packet_num_check</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, api_rf_comm.o(i.rf_data_packet_num_check))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
</UL>

<P><STRONG><a name="[149]"></a>rf_group_respond</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, api_rf_comm.o(i.rf_group_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rf_group_respond &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
</UL>

<P><STRONG><a name="[14a]"></a>rf_handshake_respond_or_initiate</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, api_rf_comm.o(i.rf_handshake_respond_or_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rf_handshake_respond_or_initiate &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_power_on_delay_report_task
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
</UL>

<P><STRONG><a name="[14b]"></a>rf_packet_num_repetition_respond</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, api_rf_comm.o(i.rf_packet_num_repetition_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = rf_packet_num_repetition_respond &rArr; rf_report_version &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_address_respond_or_initiate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_unbound_respond
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_respond
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_version
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_query_respond
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_handshake_respond_or_initiate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_group_respond
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_channel_respond
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bound_respond
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
</UL>

<P><STRONG><a name="[14d]"></a>rf_query_respond</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, api_rf_comm.o(i.rf_query_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rf_query_respond &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
</UL>

<P><STRONG><a name="[148]"></a>rf_receive_data_decode</STRONG> (Thumb, 614 bytes, Stack size 40 bytes, api_rf_comm.o(i.rf_receive_data_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rf_receive_data_decode &rArr; ircode_emit_addcode &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_host_addr_write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_group_flag_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_channel_num_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_addcode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_DelCycFunc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_COM_AddCycFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyChannel
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_address_respond_or_initiate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_unbound_respond
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_respond
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_report_version
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_query_respond
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_handshake_respond_or_initiate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_group_respond
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_packet_num_check
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_channel_respond
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bound_respond
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_comm_task
</UL>

<P><STRONG><a name="[14e]"></a>rf_report_version</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, api_rf_comm.o(i.rf_report_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rf_report_version &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
</UL>

<P><STRONG><a name="[4e]"></a>rf_set_channel_num_invalid_task</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, api_rf_comm.o(i.rf_set_channel_num_invalid_task))
<BR>[Address Reference Count : 1]<UL><LI> api_rf_comm.o(i.rf_receive_data_decode)
</UL>
<P><STRONG><a name="[14f]"></a>rf_set_respond</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, api_rf_comm.o(i.rf_set_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rf_set_respond &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
</UL>

<P><STRONG><a name="[14c]"></a>rf_unbound_respond</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, api_rf_comm.o(i.rf_unbound_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rf_unbound_respond &rArr; queue_en &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_receive_data_decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_packet_num_repetition_respond
</UL>

<P><STRONG><a name="[12a]"></a>key_scan</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, driver_key.o(i.key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_scan &rArr; HAL_IO_ReadPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan_task
</UL>

<P><STRONG><a name="[119]"></a>LL_TIM_IC_SetPolarity</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ircode_catch.o(i.LL_TIM_IC_SetPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IC_SetPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_it_handler
</UL>

<P><STRONG><a name="[23]"></a>pkg_handler_catch_directSend</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, serialctrl_handler.o(i.pkg_handler_catch_directSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pkg_handler_catch_directSend &rArr; ircode_emit_directSend &rArr; ircode_emit_start &rArr; Del_SubIREmitTask &rArr; Task_Com_DelCycFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_directSend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>pkg_handler_catch_enable</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, serialctrl_handler.o(i.pkg_handler_catch_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pkg_handler_catch_enable &rArr; serial_inpkg &rArr; hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>pkg_handler_catch_send2IR</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, serialctrl_handler.o(i.pkg_handler_catch_send2IR))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pkg_handler_catch_send2IR &rArr; ircode_emit_inarray &rArr; ircode_emit_start &rArr; Del_SubIREmitTask &rArr; Task_Com_DelCycFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_emit_inarray
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_ircode_emit_getInArrayNum
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>pkg_handler_catch_send2serial</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, serialctrl_handler.o(i.pkg_handler_catch_send2serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pkg_handler_catch_send2serial &rArr; ircode_catch_send &rArr; serial_inpkg &rArr; hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_free_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>pkg_handler_catch_write2flash</STRONG> (Thumb, 380 bytes, Stack size 88 bytes, serialctrl_handler.o(i.pkg_handler_catch_write2flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pkg_handler_catch_write2flash &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_get_p
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ircode_catch_free_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>pkg_handler_chip_cleanAll</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, serialctrl_handler.o(i.pkg_handler_chip_cleanAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pkg_handler_chip_cleanAll &rArr; flash_write &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_chip_erase
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_busy_stat_outime_checker_spt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>pkg_handler_handshake</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, serialctrl_handler.o(i.pkg_handler_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pkg_handler_handshake &rArr; serial_inpkg &rArr; hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falsh_get_jedec
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>pkg_handler_ircode_curient</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, serialctrl_handler.o(i.pkg_handler_ircode_curient))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pkg_handler_ircode_curient &rArr; serial_inpkg &rArr; hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>pkg_handler_ircode_read</STRONG> (Thumb, 354 bytes, Stack size 184 bytes, serialctrl_handler.o(i.pkg_handler_ircode_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pkg_handler_ircode_read &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>pkg_handler_ircode_usage</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, serialctrl_handler.o(i.pkg_handler_ircode_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pkg_handler_ircode_usage &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_get_index_mask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>pkg_handler_ircode_write</STRONG> (Thumb, 550 bytes, Stack size 96 bytes, serialctrl_handler.o(i.pkg_handler_ircode_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pkg_handler_ircode_write &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fread
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_get_index_mask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>pkg_handler_irindex_getallindex</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, serialctrl_handler.o(i.pkg_handler_irindex_getallindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pkg_handler_irindex_getallindex &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>pkg_handler_irindex_getotal</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, serialctrl_handler.o(i.pkg_handler_irindex_getotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pkg_handler_irindex_getotal &rArr; serial_inpkg &rArr; hal_control_uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_get_index_mask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>pkg_handler_irindex_read</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, serialctrl_handler.o(i.pkg_handler_irindex_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pkg_handler_irindex_read &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>pkg_handler_irindex_remove</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, serialctrl_handler.o(i.pkg_handler_irindex_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pkg_handler_irindex_remove &rArr; memopt_index_remove &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>pkg_handler_irindex_rmallindex</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, serialctrl_handler.o(i.pkg_handler_irindex_rmallindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pkg_handler_irindex_rmallindex &rArr; memopt_index_mask_remove &rArr; flash_sector_erase &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_mask_remove
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>pkg_handler_irindex_setredy_stat</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, serialctrl_handler.o(i.pkg_handler_irindex_setredy_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pkg_handler_irindex_setredy_stat &rArr; memopt_index_write &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>pkg_handler_irindex_write</STRONG> (Thumb, 338 bytes, Stack size 80 bytes, serialctrl_handler.o(i.pkg_handler_irindex_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pkg_handler_irindex_write &rArr; memopt_index_remove &rArr; memopt_index_read &rArr; flash_fread &rArr; flash_busy_stat_outime_checker_spt &rArr; flash_read_status &rArr; flash_spi_wr &rArr; hal_control_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_flash
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ircode_addr_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_write
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_remove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_get_index_mask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memopt_index_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_inpkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialctrl_handler.o(.data)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
